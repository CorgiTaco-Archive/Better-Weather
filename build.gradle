buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven {url='https://repo.spongepowered.org/repository/maven-public/'}


    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
group = "corgitaco.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: "snapshot", version: "${mapping}-${mc_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config="+archivesBaseName+".mixins.json"


            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                betterweather {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config="+archivesBaseName+".mixins.json"

            property 'forge.logging.console.level', 'debug'

            mods {
                betterweather {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories{
    maven {url = 'https://jitpack.io'}
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor' //Re-enable when building jar

    // Jetbrains' Annotations, cause I think contracts look neat.
    compileOnly 'org.jetbrains:annotations:21.0.1'
}

////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": "${modid}",
                "Specification-Vendor": "Better Weather",
                "Specification-Version": "1.2", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"${modid}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${modid}.mixins.json",
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')


//run "gradlew apiJar reobfApiJar"
task apiJar(type: Jar) {
    from(sourceSets.main.output)
    include 'corgitaco/betterweather/api/**'
    classifier = 'api'
}
reobf {
    apiJar {}
}
apiJar.finalizedBy('reobfApiJar')
build.dependsOn reobfApiJar
assemble.dependsOn apiJar


//task remapApiJar(type: TaskReobfuscateJar, dependsOn: apiJar) {
//    input = apiJar.outputs.getFiles().first() // Forge equivalent
//    srg = project.getTasks().getByName("createMcp2Srg").getOutputs()
//}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}

tasks.withType(JavaCompile) {
    options.incremental = true
}
